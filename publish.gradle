//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        exclude '**/pom.xml'
        exclude '**/proguard_annotations.pro'
        classpath += files(android.bootClasspath)
    }

    task androidJavadocJar(type: Jar) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts.add('archives', androidJavadocJar)
    artifacts.add('archives', androidSourcesJar)

    version = VERSION_NAME
    group = GROUP
    project.archivesBaseName = POM_ARTIFACT_ID

    def siteUrl = 'https://github.com/xjy2061/Treasure'
    def gitUrl = 'https://github.com/xjy2061/Treasure.git'

    def pomConfig = {
        scm {
            url siteUrl
            connection "scm:git:$gitUrl"
            developerConnection 'scm:git:git@github.com:xjy2061/Treasure.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'xjy2061'
                name 'xjy2061'
            }
        }
    }

    publishing.publications {
        mavenJava(MavenPublication) {
            artifactId POM_ARTIFACT_ID
            artifact androidJavadocJar
            artifact androidSourcesJar
            artifact bundleRelease

            pom {
                packaging 'aar'
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('name', POM_NAME)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', siteUrl)
                root.children().last() + pomConfig
                def dependenciesNode = root.appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }

//    install {
//        repositories.mavenInstaller {
//            pom.project {
//                name POM_NAME
//                artifactId POM_ARTIFACT_ID
//                packaging POM_PACKAGING
//                description POM_DESCRIPTION
//                url siteUrl
//
//                scm {
//                    url siteUrl
//                    connection "scm:git:$gitUrl"
//                    developerConnection 'scm:git:git@github.com:xjy2061/NovaImageLoader.git'
//                }
//
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'xjy2061'
//                        name 'xjy2061'
//                    }
//                }
//            }
//        }
//    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
//        configurations = ['archives']
        publications = ['mavenJava']
        pkg {
            repo = "maven"
            name = "$group:$POM_ARTIFACT_ID"
            desc = POM_DESCRIPTION
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = ["Apache-2.0"]
            publish = true
            publicDownloadNumbers = true
        }
    }

}